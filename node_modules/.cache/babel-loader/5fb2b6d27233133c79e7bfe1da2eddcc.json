{"ast":null,"code":"var _jsxFileName = \"/Users/htoomyat/Downloads/CS124/cs124-lab2/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { generateUniqueID } from 'web-vitals/dist/modules/lib/generateUniqueID';\nimport TodoList from './TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst INITIAL_DATA = [{\n  itemName: 'default item',\n  itemStatus: false,\n  id: generateUniqueID()\n}, {\n  itemName: 'another item',\n  itemStatus: false,\n  id: generateUniqueID()\n}, {\n  itemName: 'and another item',\n  itemStatus: true,\n  id: generateUniqueID()\n}];\n\nconst App = () => {\n  _s();\n\n  // TO ASK should this be in app or todolist\n  // here, todoitems update -> whole list rerender?\n  // in todolist, only updated items rerender?\n  const [todoItems, setTodoItems] = useState(INITIAL_DATA);\n  const [isAddClicked, setIsAddClicked] = useState(false);\n  const [newItemNameInput, setNewItemNameInput] = useState('');\n\n  const handleItemChange = (id, field, value) => {\n    const newTodoItems = todoItems.map(item => {\n      return item.id === id ? { ...item,\n        [field]: value\n      } : item;\n    });\n    setTodoItems(newTodoItems);\n  };\n\n  const handleItemAdd = name => {\n    setTodoItems([...todoItems, {\n      itemName: name,\n      itemStatus: false,\n      id: generateUniqueID()\n    }]);\n    setIsAddClicked(false);\n    setNewItemNameInput('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(TodoList, {\n        data: todoItems,\n        onItemChange: handleItemChange,\n        onItemAdd: handleItemAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), isAddClicked === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"new-item\",\n          id: \"new-item\",\n          value: newItemNameInput,\n          onChange: e => setNewItemNameInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleItemAdd(newItemNameInput),\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setIsAddClicked(true),\n        children: \"Add A Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"HMrc6hM95isCw1s17OXCEduw7q8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/htoomyat/Downloads/CS124/cs124-lab2/src/App.jsx"],"names":["React","useState","generateUniqueID","TodoList","INITIAL_DATA","itemName","itemStatus","id","App","todoItems","setTodoItems","isAddClicked","setIsAddClicked","newItemNameInput","setNewItemNameInput","handleItemChange","field","value","newTodoItems","map","item","handleItemAdd","name","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,gBAAT,QAAiC,8CAAjC;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,QAAQ,EAAE,cADZ;AAEEC,EAAAA,UAAU,EAAE,KAFd;AAGEC,EAAAA,EAAE,EAAEL,gBAAgB;AAHtB,CADmB,EAMnB;AACEG,EAAAA,QAAQ,EAAE,cADZ;AAEEC,EAAAA,UAAU,EAAE,KAFd;AAGEC,EAAAA,EAAE,EAAEL,gBAAgB;AAHtB,CANmB,EAWnB;AACEG,EAAAA,QAAQ,EAAE,kBADZ;AAEEC,EAAAA,UAAU,EAAE,IAFd;AAGEC,EAAAA,EAAE,EAAEL,gBAAgB;AAHtB,CAXmB,CAArB;;AAkBA,MAAMM,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACG,YAAD,CAA1C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,EAAD,CAAxD;;AAEA,QAAMc,gBAAgB,GAAG,CAACR,EAAD,EAAKS,KAAL,EAAYC,KAAZ,KAAsB;AAC7C,UAAMC,YAAY,GAAGT,SAAS,CAACU,GAAV,CAAeC,IAAD,IAAU;AAC3C,aAAOA,IAAI,CAACb,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGa,IAAL;AAAW,SAACJ,KAAD,GAASC;AAApB,OAAjB,GAA+CG,IAAtD;AACD,KAFoB,CAArB;AAGAV,IAAAA,YAAY,CAACQ,YAAD,CAAZ;AACD,GALD;;AAOA,QAAMG,aAAa,GAAIC,IAAD,IAAU;AAC9BZ,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe;AAAEJ,MAAAA,QAAQ,EAAEiB,IAAZ;AAAkBhB,MAAAA,UAAU,EAAE,KAA9B;AAAqCC,MAAAA,EAAE,EAAEL,gBAAgB;AAAzD,KAAf,CAAD,CAAZ;AACAU,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAE,IAAAA,mBAAmB,CAAC,EAAD,CAAnB;AACD,GAJD;;AAMA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEL,SAAhB;AAA2B,QAAA,YAAY,EAAEM,gBAAzC;AAA2D,QAAA,SAAS,EAAEM;AAAtE;AAAA;AAAA;AAAA;AAAA,cADF,EAEGV,YAAY,KAAK,IAAjB,gBACC;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,EAAE,EAAC,UAHL;AAIE,UAAA,KAAK,EAAEE,gBAJT;AAKE,UAAA,QAAQ,EAAGU,CAAD,IAAOT,mBAAmB,CAACS,CAAC,CAACC,MAAF,CAASP,KAAV;AALtC;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAQ,UAAA,OAAO,EAAE,MAAMI,aAAa,CAACR,gBAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAYC;AAAK,QAAA,OAAO,EAAE,MAAMD,eAAe,CAAC,IAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAqBD,CA1CD;;GAAMJ,G;;KAAAA,G;AA4CN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { generateUniqueID } from 'web-vitals/dist/modules/lib/generateUniqueID';\n\nimport TodoList from './TodoList';\n\nconst INITIAL_DATA = [\n  {\n    itemName: 'default item',\n    itemStatus: false,\n    id: generateUniqueID()\n  },\n  {\n    itemName: 'another item',\n    itemStatus: false,\n    id: generateUniqueID()\n  },\n  {\n    itemName: 'and another item',\n    itemStatus: true,\n    id: generateUniqueID()\n  }\n];\n\nconst App = () => {\n  // TO ASK should this be in app or todolist\n  // here, todoitems update -> whole list rerender?\n  // in todolist, only updated items rerender?\n  const [todoItems, setTodoItems] = useState(INITIAL_DATA);\n  const [isAddClicked, setIsAddClicked] = useState(false);\n  const [newItemNameInput, setNewItemNameInput] = useState('');\n\n  const handleItemChange = (id, field, value) => {\n    const newTodoItems = todoItems.map((item) => {\n      return item.id === id ? { ...item, [field]: value } : item;\n    });\n    setTodoItems(newTodoItems);\n  };\n\n  const handleItemAdd = (name) => {\n    setTodoItems([...todoItems, { itemName: name, itemStatus: false, id: generateUniqueID() }]);\n    setIsAddClicked(false);\n    setNewItemNameInput('');\n  };\n\n  return (\n    <>\n      <div className=\"app-container\">\n        <TodoList data={todoItems} onItemChange={handleItemChange} onItemAdd={handleItemAdd} />\n        {isAddClicked === true ? (\n          <div>\n            <input\n              type=\"text\"\n              name=\"new-item\"\n              id=\"new-item\"\n              value={newItemNameInput}\n              onChange={(e) => setNewItemNameInput(e.target.value)}\n            />\n            <button onClick={() => handleItemAdd(newItemNameInput)}>Add</button>\n          </div>\n        ) : (\n          <div onClick={() => setIsAddClicked(true)}>Add A Task</div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}