{"ast":null,"code":"var _jsxFileName = \"/Users/htoomyat/Downloads/CS124/cs124-lab2/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { generateUniqueID } from 'web-vitals/dist/modules/lib/generateUniqueID';\nimport TodoList from './TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst INITIAL_DATA = [{\n  itemName: 'default item',\n  itemStatus: false,\n  id: generateUniqueID()\n}, {\n  itemName: 'another item',\n  itemStatus: false,\n  id: generateUniqueID()\n}, {\n  itemName: 'and another item',\n  itemStatus: true,\n  id: generateUniqueID()\n}];\n\nconst App = () => {\n  _s();\n\n  // TO ASK should this be in app or todolist\n  // here, todoitems update -> whole list rerender?\n  // in todolist, only updated items rerender?\n  const [todoItems, setTodoItems] = useState(INITIAL_DATA);\n\n  const handleItemChange = (id, field, value) => {\n    const newTodoItems = todoItems.map(item => {\n      return item.id === id ? { ...item,\n        [field]: value\n      } : item;\n    });\n    setTodoItems(newTodoItems);\n  };\n\n  const handleItemAdd = name => {\n    setTodoItems([...todoItems, {\n      itemName: name,\n      itemStatus: false,\n      id: generateUniqueID()\n    }]);\n    console.log(todoItems);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TodoList, {\n      data: todoItems,\n      onItemChange: handleItemChange,\n      onItemAdd: handleItemAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"sX3bv7H4YYJcPuueT6fIuuaKMv8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/htoomyat/Downloads/CS124/cs124-lab2/src/App.jsx"],"names":["React","useState","generateUniqueID","TodoList","INITIAL_DATA","itemName","itemStatus","id","App","todoItems","setTodoItems","handleItemChange","field","value","newTodoItems","map","item","handleItemAdd","name","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,gBAAT,QAAiC,8CAAjC;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,QAAQ,EAAE,cADZ;AAEEC,EAAAA,UAAU,EAAE,KAFd;AAGEC,EAAAA,EAAE,EAAEL,gBAAgB;AAHtB,CADmB,EAMnB;AACEG,EAAAA,QAAQ,EAAE,cADZ;AAEEC,EAAAA,UAAU,EAAE,KAFd;AAGEC,EAAAA,EAAE,EAAEL,gBAAgB;AAHtB,CANmB,EAWnB;AACEG,EAAAA,QAAQ,EAAE,kBADZ;AAEEC,EAAAA,UAAU,EAAE,IAFd;AAGEC,EAAAA,EAAE,EAAEL,gBAAgB;AAHtB,CAXmB,CAArB;;AAkBA,MAAMM,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACG,YAAD,CAA1C;;AAEA,QAAMO,gBAAgB,GAAG,CAACJ,EAAD,EAAKK,KAAL,EAAYC,KAAZ,KAAsB;AAC7C,UAAMC,YAAY,GAAGL,SAAS,CAACM,GAAV,CAAeC,IAAD,IAAU;AAC3C,aAAOA,IAAI,CAACT,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGS,IAAL;AAAW,SAACJ,KAAD,GAASC;AAApB,OAAjB,GAA+CG,IAAtD;AACD,KAFoB,CAArB;AAGAN,IAAAA,YAAY,CAACI,YAAD,CAAZ;AACD,GALD;;AAOA,QAAMG,aAAa,GAAIC,IAAD,IAAU;AAC9BR,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe;AAAEJ,MAAAA,QAAQ,EAAEa,IAAZ;AAAkBZ,MAAAA,UAAU,EAAE,KAA9B;AAAqCC,MAAAA,EAAE,EAAEL,gBAAgB;AAAzD,KAAf,CAAD,CAAZ;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACD,GAHD;;AAKA,sBACE;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEA,SAAhB;AAA2B,MAAA,YAAY,EAAEE,gBAAzC;AAA2D,MAAA,SAAS,EAAEM;AAAtE;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAvBD;;GAAMT,G;;KAAAA,G;AAyBN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { generateUniqueID } from 'web-vitals/dist/modules/lib/generateUniqueID';\n\nimport TodoList from './TodoList';\n\nconst INITIAL_DATA = [\n  {\n    itemName: 'default item',\n    itemStatus: false,\n    id: generateUniqueID()\n  },\n  {\n    itemName: 'another item',\n    itemStatus: false,\n    id: generateUniqueID()\n  },\n  {\n    itemName: 'and another item',\n    itemStatus: true,\n    id: generateUniqueID()\n  }\n];\n\nconst App = () => {\n  // TO ASK should this be in app or todolist\n  // here, todoitems update -> whole list rerender?\n  // in todolist, only updated items rerender?\n  const [todoItems, setTodoItems] = useState(INITIAL_DATA);\n\n  const handleItemChange = (id, field, value) => {\n    const newTodoItems = todoItems.map((item) => {\n      return item.id === id ? { ...item, [field]: value } : item;\n    });\n    setTodoItems(newTodoItems);\n  };\n\n  const handleItemAdd = (name) => {\n    setTodoItems([...todoItems, { itemName: name, itemStatus: false, id: generateUniqueID() }]);\n    console.log(todoItems);\n  };\n\n  return (\n    <>\n      <TodoList data={todoItems} onItemChange={handleItemChange} onItemAdd={handleItemAdd} />\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}