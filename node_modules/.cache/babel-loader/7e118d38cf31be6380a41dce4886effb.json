{"ast":null,"code":"var _jsxFileName = \"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./todo-item.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodoItem = props => {\n  _s();\n\n  const [updatedName, setUpdatedName] = useState(\"\");\n  const [isRenameClicked, setIsRenameClicked] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `item-container ${props.status === true ? \"completed-item\" : null}`,\n      onClick: () => {\n        props.onItemChange(props.id, \"itemStatus\", props.status ? false : true);\n      },\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), isRenameClicked ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"updated-name\",\n        id: \"updated-name\",\n        value: updatedName,\n        onChange: e => {\n          setUpdatedName(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => props.onItemChange(props.id, \"itemName\", updatedName),\n        children: \"Rename\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsRenameClicked(prevState => !prevState);\n      },\n      children: \"Rename\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodoItem, \"iZlH6tKoMLBKWHFtYmmkO0evzX8=\");\n\n_c = TodoItem;\nTodoItem.propTypes = {\n  name: PropTypes.string,\n  status: PropTypes.bool,\n  id: PropTypes.string,\n  onItemChange: PropTypes.func\n};\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoItem.jsx"],"names":["React","useState","PropTypes","TodoItem","props","updatedName","setUpdatedName","isRenameClicked","setIsRenameClicked","status","onItemChange","id","name","e","target","value","prevState","propTypes","string","bool","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,iBAAP;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,KAAD,CAAtD;AACA,sBACE;AAAA,4BACE;AACE,MAAA,SAAS,EAAG,kBACVG,KAAK,CAACK,MAAN,KAAiB,IAAjB,GAAwB,gBAAxB,GAA2C,IAC5C,EAHH;AAIE,MAAA,OAAO,EAAE,MAAM;AACbL,QAAAA,KAAK,CAACM,YAAN,CACEN,KAAK,CAACO,EADR,EAEE,YAFF,EAGEP,KAAK,CAACK,MAAN,GAAe,KAAf,GAAuB,IAHzB;AAKD,OAVH;AAAA,gBAYGL,KAAK,CAACQ;AAZT;AAAA;AAAA;AAAA;AAAA,YADF,EAeGL,eAAe,gBACd;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,cAFP;AAGE,QAAA,EAAE,EAAC,cAHL;AAIE,QAAA,KAAK,EAAEF,WAJT;AAKE,QAAA,QAAQ,EAAGQ,CAAD,IAAO;AACfP,UAAAA,cAAc,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD;AAPH;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AACE,QAAA,OAAO,EAAE,MACPX,KAAK,CAACM,YAAN,CAAmBN,KAAK,CAACO,EAAzB,EAA6B,UAA7B,EAAyCN,WAAzC,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA,oBADc,gBAoBd;AACE,MAAA,OAAO,EAAE,MAAM;AACbG,QAAAA,kBAAkB,CAAEQ,SAAD,IAAe,CAACA,SAAjB,CAAlB;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnCJ;AAAA,kBADF;AA8CD,CAjDD;;GAAMb,Q;;KAAAA,Q;AAmDNA,QAAQ,CAACc,SAAT,GAAqB;AACnBL,EAAAA,IAAI,EAAEV,SAAS,CAACgB,MADG;AAEnBT,EAAAA,MAAM,EAAEP,SAAS,CAACiB,IAFC;AAGnBR,EAAAA,EAAE,EAAET,SAAS,CAACgB,MAHK;AAInBR,EAAAA,YAAY,EAAER,SAAS,CAACkB;AAJL,CAArB;AAOA,eAAejB,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./todo-item.css\";\n\nconst TodoItem = (props) => {\n  const [updatedName, setUpdatedName] = useState(\"\");\n  const [isRenameClicked, setIsRenameClicked] = useState(false);\n  return (\n    <>\n      <div\n        className={`item-container ${\n          props.status === true ? \"completed-item\" : null\n        }`}\n        onClick={() => {\n          props.onItemChange(\n            props.id,\n            \"itemStatus\",\n            props.status ? false : true\n          );\n        }}\n      >\n        {props.name}\n      </div>\n      {isRenameClicked ? (\n        <>\n          <input\n            type=\"text\"\n            name=\"updated-name\"\n            id=\"updated-name\"\n            value={updatedName}\n            onChange={(e) => {\n              setUpdatedName(e.target.value);\n            }}\n          />\n          <button\n            onClick={() =>\n              props.onItemChange(props.id, \"itemName\", updatedName)\n            }\n          >\n            Rename\n          </button>\n        </>\n      ) : (\n        <button\n          onClick={() => {\n            setIsRenameClicked((prevState) => !prevState);\n          }}\n        >\n          Rename\n        </button>\n      )}\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  name: PropTypes.string,\n  status: PropTypes.bool,\n  id: PropTypes.string,\n  onItemChange: PropTypes.func,\n};\n\nexport default TodoItem;\n"]},"metadata":{},"sourceType":"module"}