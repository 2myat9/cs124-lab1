{"ast":null,"code":"var _jsxFileName = \"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TodoItem from \"./TodoItem\";\nimport \"./todo-list.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodoList = props => {\n  _s();\n\n  const [updatedName, setUpdatedName] = useState(\"\");\n  const [isRenameClicked, setIsRenameClicked] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-container\",\n      children: props.isCompletedShown ? props.data.map(item => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TodoItem, {\n            name: item.itemName,\n            id: item.id,\n            status: item.itemStatus,\n            onItemChange: props.onItemChange\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 19\n          }, this), isRenameClicked ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"updated-name\",\n              id: \"updated-name\",\n              value: updatedName,\n              onChange: e => {\n                setUpdatedName(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => props.onItemChange(item.id, \"itemName\", updatedName),\n              children: \"Rename\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setIsRenameClicked(prevState => !prevState);\n            },\n            children: \"Rename\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true);\n      }) : props.data.map(item => {\n        return item.itemStatus === false ? /*#__PURE__*/_jsxDEV(TodoItem, {\n          name: item.itemName,\n          id: item.id,\n          status: item.itemStatus,\n          onItemChange: props.onItemChange\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this) : null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(TodoList, \"iZlH6tKoMLBKWHFtYmmkO0evzX8=\");\n\n_c = TodoList;\nTodoList.propTypes = {\n  data: PropTypes.array.isRequired,\n  onItemChange: PropTypes.func,\n  isCompletedShown: PropTypes.bool\n};\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoList.jsx"],"names":["React","useState","PropTypes","TodoItem","TodoList","props","updatedName","setUpdatedName","isRenameClicked","setIsRenameClicked","isCompletedShown","data","map","item","itemName","id","itemStatus","onItemChange","e","target","value","prevState","propTypes","array","isRequired","func","bool"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,iBAAP;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;AACA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACGI,KAAK,CAACK,gBAAN,GACGL,KAAK,CAACM,IAAN,CAAWC,GAAX,CAAgBC,IAAD,IAAU;AACvB,4BACE;AAAA,kCACE,QAAC,QAAD;AAEE,YAAA,IAAI,EAAEA,IAAI,CAACC,QAFb;AAGE,YAAA,EAAE,EAAED,IAAI,CAACE,EAHX;AAIE,YAAA,MAAM,EAAEF,IAAI,CAACG,UAJf;AAKE,YAAA,YAAY,EAAEX,KAAK,CAACY;AALtB,aACOJ,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA,kBADF,EAQGP,eAAe,gBACd;AAAA,oCACE;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,IAAI,EAAC,cAFP;AAGE,cAAA,EAAE,EAAC,cAHL;AAIE,cAAA,KAAK,EAAEF,WAJT;AAKE,cAAA,QAAQ,EAAGY,CAAD,IAAO;AACfX,gBAAAA,cAAc,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD;AAPH;AAAA;AAAA;AAAA;AAAA,oBADF,eAUE;AACE,cAAA,OAAO,EAAE,MACPf,KAAK,CAACY,YAAN,CAAmBJ,IAAI,CAACE,EAAxB,EAA4B,UAA5B,EAAwCT,WAAxC,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA,0BADc,gBAoBd;AACE,YAAA,OAAO,EAAE,MAAM;AACbG,cAAAA,kBAAkB,CAAEY,SAAD,IAAe,CAACA,SAAjB,CAAlB;AACD,aAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA5BJ;AAAA,wBADF;AAuCD,OAxCD,CADH,GA0CGhB,KAAK,CAACM,IAAN,CAAWC,GAAX,CAAgBC,IAAD,IAAU;AACvB,eAAOA,IAAI,CAACG,UAAL,KAAoB,KAApB,gBACL,QAAC,QAAD;AAEE,UAAA,IAAI,EAAEH,IAAI,CAACC,QAFb;AAGE,UAAA,EAAE,EAAED,IAAI,CAACE,EAHX;AAIE,UAAA,MAAM,EAAEF,IAAI,CAACG,UAJf;AAKE,UAAA,YAAY,EAAEX,KAAK,CAACY;AALtB,WACOJ,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA,gBADK,GAQH,IARJ;AASD,OAVD;AA3CN;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA2DD,CA9DD;;GAAMX,Q;;KAAAA,Q;AAgENA,QAAQ,CAACkB,SAAT,GAAqB;AACnBX,EAAAA,IAAI,EAAET,SAAS,CAACqB,KAAV,CAAgBC,UADH;AAEnBP,EAAAA,YAAY,EAAEf,SAAS,CAACuB,IAFL;AAGnBf,EAAAA,gBAAgB,EAAER,SAAS,CAACwB;AAHT,CAArB;AAMA,eAAetB,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport TodoItem from \"./TodoItem\";\nimport \"./todo-list.css\";\n\nconst TodoList = (props) => {\n  const [updatedName, setUpdatedName] = useState(\"\");\n  const [isRenameClicked, setIsRenameClicked] = useState(false);\n  return (\n    <>\n      <div className=\"list-container\">\n        {props.isCompletedShown\n          ? props.data.map((item) => {\n              return (\n                <>\n                  <TodoItem\n                    key={item.id}\n                    name={item.itemName}\n                    id={item.id}\n                    status={item.itemStatus}\n                    onItemChange={props.onItemChange}\n                  />\n                  {isRenameClicked ? (\n                    <>\n                      <input\n                        type=\"text\"\n                        name=\"updated-name\"\n                        id=\"updated-name\"\n                        value={updatedName}\n                        onChange={(e) => {\n                          setUpdatedName(e.target.value);\n                        }}\n                      />\n                      <button\n                        onClick={() =>\n                          props.onItemChange(item.id, \"itemName\", updatedName)\n                        }\n                      >\n                        Rename\n                      </button>\n                    </>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        setIsRenameClicked((prevState) => !prevState);\n                      }}\n                    >\n                      Rename\n                    </button>\n                  )}\n                </>\n              );\n            })\n          : props.data.map((item) => {\n              return item.itemStatus === false ? (\n                <TodoItem\n                  key={item.id}\n                  name={item.itemName}\n                  id={item.id}\n                  status={item.itemStatus}\n                  onItemChange={props.onItemChange}\n                />\n              ) : null;\n            })}\n      </div>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  data: PropTypes.array.isRequired,\n  onItemChange: PropTypes.func,\n  isCompletedShown: PropTypes.bool,\n};\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}